import { Transport, TransportRequestOptions, TransportRequestOptionsWithMeta, TransportRequestOptionsWithOutMeta, TransportResult } from '@elastic/transport';
import * as T from '../types';
import { kAcceptedParams } from '../../client';
interface That {
    transport: Transport;
    [kAcceptedParams]: Record<string, {
        path: string[];
        body: string[];
        query: string[];
    }>;
}
export default class Project {
    transport: Transport;
    [kAcceptedParams]: Record<string, {
        path: string[];
        body: string[];
        query: string[];
    }>;
    constructor(transport: Transport);
    /**
      * Return tags defined for the project
      */
    tags(this: That, params?: T.ProjectTagsRequest, options?: TransportRequestOptionsWithOutMeta): Promise<T.ProjectTagsResponse>;
    tags(this: That, params?: T.ProjectTagsRequest, options?: TransportRequestOptionsWithMeta): Promise<TransportResult<T.ProjectTagsResponse, unknown>>;
    tags(this: That, params?: T.ProjectTagsRequest, options?: TransportRequestOptions): Promise<T.ProjectTagsResponse>;
}
export {};
